---
published: false
title: draft
layout: post
---
Our AngularJS app is in the middle of migrating to a real single-page app (SPA). The app has several modules joined under a central navigation. Currently, each module is its own SPA, and its own Angular app.
Customers go to our product page, enter their log-in information, and are then directed to a new page. The problem I'm seeing is the page takes upwards of 1 second to finish loading.
My goal for this project was to reduce the page render time for our app. However, I didn't want to make any large, risky changes before the release. The following are the steps I took to reduce the page load time on our application, and the problems I encountered.

# Break dependencies on other modules

The first thing I noticed was our app's page had JavaScript files included that we shouldnâ€™t need. A cursory glance revealed that some files weren't necessary. They were vestigial files from a previous release. Others were not so clear. For some reason, we included the JavaScript apps for two other current modules Device and System.

## The problem

Removing the Device and System module dependencies broke our app.

## The solution

One nice thing about Angular is dependency injection. If your module depends on another, just include that module into your module's declaration. One bad thing about Angular is dependency injection. If your module depends on A, and A depends on B, you have an implicit dependency on B in your module. This makes tracing dependencies less transparent than it seems. I listed out all the dependencies of our module and for the Device and System modules and found the differences. Through some trial and error, I included only the necessary missing dependencies and removed their files from our page.

## The result

This improved our load time, but not by much. The extraneous modules weren't that large in the grand scheme of things.

# Use async and defer attributes in script tags

The `async` and `defer` attributes allow JavaScript to be downloaded without blocking the browser's HTML parser. Our HTML file contained a script that didn't manipulate the DOM and had no dependencies. I added the async attribute to the script tag so HTML would keep parsing while the file was downloading. I moved all scripts to the bottom of the page, and added the defer attribute to remaining scripts.

## The result
This didn't improve the page much since we didn't have much markup to parse. Angular generates most of the markup after the DOM is ready.